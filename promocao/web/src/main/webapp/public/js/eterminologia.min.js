var app = angular.module('eterminologia', [
    'ngRoute',
    'ajoslin.promise-tracker',
    'angular-loading-bar'
  ]);
app.controller('PreloaderController', [
  '$scope',
  'promiseTracker',
  function ($scope, promiseTracker) {
    $scope.loadingTracker = promiseTracker();
  }
]);
$(document).ready(function () {
  $('.select').select2();
});
app.controller('AtributoBuscaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.filtro = {};
    $scope.initController = function () {
      var filldata = [
          'STATUS',
          'TIPO_METADADO'
        ];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.statuss = data.message.response.STATUS;
        $scope.tipos = data.message.response.TIPO_METADADO;
      });
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(15, num, true, 'apresentacao', null);
      if (filtro) {
        if (filtro.apresentacao)
          esbJson.addParametro('apresentacao', filtro.apresentacao);
        if (filtro.nome)
          esbJson.addParametro('nome', filtro.nome);
        if (filtro.status)
          esbJson.addParametro('status', filtro.status);
        if (filtro.tipo)
          esbJson.addParametro('tipo', filtro.tipo);
      }
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/metadado/'
      }).success(function (data) {
        $scope.atributos = data.message.response.list;
        $scope.paginador(data.message.response.size, num + 1);
        lock = false;
        $('.pagination').show();
      }).error(function (data, status) {
      });
    };
    $scope.paginador = function (size, paginaAtual) {
      var paginas = Math.ceil(size / 20);
      $('.pagination').bootpag({
        total: paginas,
        page: paginaAtual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.trocarStatus = function (index) {
      var atributo = $scope.atributos[index];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', atributo.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/metadado/alterarstatus'
      }).success(function (data) {
        $scope.atributos[index] = data.message.response.entidade;
      }).error(function (data, status) {
      });
    };
    $scope.reset = function () {
      $scope.filtro = {};
      $scope.atributos = [];
      $scope.paginador(0, 1);
      $('.pagination').hide();
    };
  }
]);
app.controller('AtributoCadastroController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.form = {};
    $scope.isNumber = false;
    $scope.initController = function (id) {
      var filldata = ['TIPO_METADADO'];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.tipos = data.message.response.TIPO_METADADO;
      });
      if (id != 'null') {
        esbJson = new EsbJson(su);
        esbJson.addParametro('id', id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/metadado/edit'
        }).success(function (data) {
          $scope.atributo = data.message.response.entidade;
        });
      }
    };
    $scope.selectTipoMetadado = function () {
      var tipo = $scope.getData();
      if (tipo == 'NUMBER') {
        $scope.isNumber = true;
      } else {
        $scope.isNumber = false;
        $scope.atributo.numerosDecimais = null;
      }
    };
    $scope.getData = function () {
      var index = $('#tipo').val();
      if (index) {
        index = parseInt(index, 10);
        return $scope.tipos[index];
      }
    };
    $scope.salvar = function (atributo) {
      if ($scope.validateForm(atributo)) {
        if (!$scope.isNumber) {
          delete atributo.numerosDecimais;
        } else if (!atributo.numerosDecimais) {
          atributo.numerosDecimais = 0;
        }
        var esbJson = new EsbJson(su);
        esbJson.addToSave(atributo);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/metadado/save'
        }).success(function (data) {
          $('#cancelar').click();
        }).error(function (data, status) {
          $scope.form.nomeExistente = false;
          angular.forEach(data.message.erro, function (err) {
            if (err.campo == 'ER0019') {
              $scope.form.nomeExistente = true;
            }
          });
        });
      }
    };
    $scope.validateForm = function (atributo) {
      $scope.form.nomeRequired = false;
      $scope.form.apresentacaoRequired = false;
      $scope.form.tipoRequired = false;
      if (atributo) {
        if (!atributo.apresentacao || atributo.apresentacao === '')
          $scope.form.apresentacaoRequired = true;
        if (!atributo.nome || atributo.nome === '')
          $scope.form.nomeRequired = true;
        if (!atributo.tipo || atributo.tipo === '')
          $scope.form.tipoRequired = true;
      } else {
        $scope.form.nomeRequired = true;
        $scope.form.apresentacaoRequired = true;
        $scope.form.tipoRequired = true;
        return false;
      }
      return !$scope.form.tipoRequired && !$scope.form.apresentacaoRequired && !$scope.form.nomeRequired;
    };
  }
]);
app.controller('ConsultaBuscaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    var lock = false;
    $scope.filtro = {};
    $scope.isTipoCompartilhamentoTravado = false;
    $scope.initController = function (tipoCompartilhamento) {
      var filldata = null;
      if (tipoCompartilhamento && tipoCompartilhamento === 'LOCAL') {
        filldata = [
          'STATUS',
          'TABELA_LOCAL'
        ];
        $scope.tipoCompartilhamento = tipoCompartilhamento;
        $scope.isTipoCompartilhamentoTravado = true;
      } else {
        filldata = [
          'STATUS',
          'TIPO_COMPARTILHAMENTO',
          'TABELA_DISTINCT'
        ];
      }
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.statuss = data.message.response.STATUS;
        if (!$scope.isTipoCompartilhamentoTravado) {
          $scope.tabelas = data.message.response.TABELA_DISTINCT;
          $scope.tabelasRaw = data.message.response.TABELA_DISTINCT;
        } else {
          $scope.tabelas = data.message.response.TABELA_LOCAL;
          $scope.tabelasRaw = data.message.response.TABELA_LOCAL;
        }
        $scope.tiposCompartilhamentos = data.message.response.TIPO_COMPARTILHAMENTO;
      });
    };
    $scope.filtrarTabela = function (tipo) {
      $scope.tabelas = [];
      angular.forEach($scope.tabelasRaw, function (v) {
        if (v.tipoCompartilhamento == tipo) {
          $scope.tabelas.push(v);
        }
      });
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = $scope.createJson(filtro, num);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/'
      }).success(function (data) {
        $scope.terminologias = data.message.response.list;
        $scope.filtroAtual = filtro;
        $scope.paginador(data.message.response.size, num + 1);
        lock = false;
      }).error(function (data, status) {
      });
    };
    $scope.paginador = function (size, paginaAtual) {
      var paginas = Math.ceil(size / 20);
      paginas = paginas === 0 ? 1 : paginas;
      $('.paginador').bootpag({
        total: paginas,
        page: paginaAtual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.createJson = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(20, num, true, null, null);
      if (filtro) {
        if (filtro.codigo)
          esbJson.addParametro('codigo', filtro.codigo);
        if (filtro.inicioVigencia)
          esbJson.addParametro('inicioVigencia', filtro.inicioVigencia);
        if (filtro.fimVigencia)
          esbJson.addParametro('fimVigencia', filtro.fimVigencia);
        if (filtro.termo)
          esbJson.addParametro('termoFormatado', filtro.termo);
        if (filtro.descricao)
          esbJson.addParametro('definicaoFormatado', filtro.descricao);
        if (filtro.status)
          esbJson.addParametro('status', filtro.status);
        if (filtro.versao)
          esbJson.addParametro('tabela.versao', filtro.versao);
        if (filtro.tipoCompartilhamento && !$scope.isTipoCompartilhamentoTravado)
          esbJson.addParametro('tabela.tipoCompartilhamento', filtro.tipoCompartilhamento);
        if ($scope.isTipoCompartilhamentoTravado)
          esbJson.addParametro('tabela.tipoCompartilhamento', $scope.tipoCompartilhamento);
        if (filtro.tabela) {
          if (filtro.tabela.nome)
            esbJson.addParametro('tabela.nome', filtro.tabela.nome);
        }
      }
      return esbJson;
    };
    $scope.addDataInicioFiltro = function (field) {
      $scope.filtro.inicioVigencia = $(field).val();
    };
    $scope.addDataFimFiltro = function (field) {
      $scope.filtro.fimVigencia = $(field).val();
    };
    $scope.reset = function () {
      $scope.filtro = {};
      $scope.terminologias = [];
      $scope.paginador(0, 1);
    };
  }
]);
app.controller('ConsultaInclusaoController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  '$timeout',
  function ($scope, $rootScope, $location, $http, $timeout) {
    $rootScope.activetab = $location.path();
    var lock = false;
    $scope.id = 0;
    $scope.terminologiaBase = {};
    $scope.terminologiaBase.terminologiasPara = [];
    $scope.meta = {};
    $scope.tipoMapeamento = null;
    $scope.equivalencia = null;
    $scope.initControllerInclusao = function (id) {
      $scope.id = id;
      var filldata = [
          'TIPO_COMPARTILHAMENTO',
          'TABELA_DISTINCT',
          'TIPO_MAPAEMENTO',
          'EQUIVALENCIA',
          'TABELA_LOCAL_ENTIDADE'
        ];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.tabelas = data.message.response.TABELA_LOCAL_ENTIDADE;
        $scope.tabelasDistinct = data.message.response.TABELA_DISTINCT;
        $scope.tiposMapeamentos = data.message.response.TIPO_MAPAEMENTO;
        $scope.tiposCompartilhamentos = data.message.response.TIPO_COMPARTILHAMENTO;
        $scope.equivalencias = data.message.response.EQUIVALENCIA;
        $timeout(function () {
          $scope.carregarTerminologia();
        }, 1000);
      });
    };
    $scope.carregarTerminologia = function () {
      if ($scope.id > 0) {
        esbJson = new EsbJson(su);
        esbJson.addParametro('id', $scope.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/terminologia/edit'
        }).success(function (data) {
          $scope.terminologiaBase = data.message.response.entidade;
          $scope.terminologiaBase.terminologiasPara = $scope.terminologiaBase.allTerminologiasPara;
          if ($scope.terminologiaBase.terminologiasPara === null) {
            $scope.terminologiaBase.terminologiasPara = [];
          }
          if ($scope.terminologiaBase.tabela.templateMetadado && $scope.terminologiaBase.tabela.templateMetadado.metadados) {
            angular.forEach($scope.terminologiaBase.tabela.templateMetadado.metadados, function (v) {
              angular.forEach($scope.terminologiaBase.detalhes, function (det) {
                if (v.metadado.id == det.metadado.id) {
                  $scope.meta[v.metadado.nome] = det.informacao;
                }
              });
            });
          }
          angular.forEach($scope.tabelas, function (v, i) {
            if (v.id == $scope.terminologiaBase.tabela.id) {
              $('#tabela').val(i);
              $scope.terminologiaBase.tabela = v;
            }
          });
        });
      }
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = createCriteria(filtro, num);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/'
      }).success(function (data) {
        $scope.terminologias = data.message.response.list;
        $scope.filtroAtual = filtro;
        $scope.paginacaoMap(data.message.response.size, num + 1);
        angular.forEach($scope.terminologias, function (v) {
          angular.forEach($scope.terminologiaBase.terminologiasPara, function (vMap) {
            if (vMap.terminologiaPara.id === v.id) {
              v.selecionado = true;
            }
          });
        });
        lock = false;
      });
    };
    $scope.paginacaoMap = function (size, atual) {
      var paginas = Math.ceil(size / 10) * 1;
      paginas = paginas === 0 ? 1 : paginas;
      $('.paginationMap').bootpag({
        total: paginas,
        page: atual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num);
        }
      });
    };
    $scope.selecionar = function (index) {
      var terminologia = $scope.terminologias[index];
      $scope.terminologiaSelecionada = terminologia;
      $scope.index = index;
    };
    $scope.cancelarMapeamento = function () {
      $scope.tipoMapeamento = null;
      $scope.equivalencia = null;
      $scope.index = null;
    };
    $scope.adicionarMapeamento = function () {
      var mapeamento = {};
      mapeamento.terminologiaPara = $scope.terminologiaSelecionada;
      mapeamento.tipoMapeamento = $scope.tipoMapeamento;
      mapeamento.equivalencia = $scope.equivalencia;
      var terminologia = $scope.terminologias[$scope.index];
      terminologia.selecionado = true;
      $scope.terminologiaBase.terminologiasPara.push(mapeamento);
      $scope.cancelarMapeamento();
    };
    $scope.excluirMapeamento = function (indexMapeado) {
      var mapeamento = $scope.terminologiaBase.terminologiasPara[indexMapeado];
      $scope.terminologiaBase.terminologiasPara.splice(indexMapeado, 1);
      angular.forEach($scope.terminologias, function (v) {
        if (v.id == mapeamento.terminologiaPara.id) {
          v.selecionado = false;
        }
      });
    };
    $scope.salvar = function () {
      $scope.terminologiaBase.detalhes = [];
      if ($scope.terminologiaBase.tabela.templateMetadado && $scope.terminologiaBase.tabela.templateMetadado.metadados) {
        angular.forEach($scope.terminologiaBase.tabela.templateMetadado.metadados, function (v) {
          var detalhe = {};
          detalhe.informacao = $scope.meta[v.metadado.nome];
          detalhe.metadado = v.metadado;
          $scope.terminologiaBase.detalhes.push(detalhe);
        });
      }
      var esbJson = new EsbJson(su);
      esbJson.addToSave($scope.terminologia);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/save'
      }).success(function (data) {
        $('#cancelar').click();
      });
    };
    $scope.exibeModalHistorico = function (id) {
      $('#idHistorico').val(id);
      $('#exibeHistorico').click();
    };
    function createCriteria(filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(10, num, true, null, null);
      if (filtro) {
        if (filtro.codigo)
          esbJson.addParametro('codigo', filtro.codigo);
        if (filtro.inicioVigencia)
          esbJson.addParametro('inicioVigencia', filtro.inicioVigencia);
        if (filtro.fimVigencia)
          esbJson.addParametro('fimVigencia', filtro.fimVigencia);
        if (filtro.termo)
          esbJson.addParametro('termoFormatado', filtro.termo);
        if (filtro.descricao)
          esbJson.addParametro('definicaoFormatado', filtro.descricao);
        if (filtro.versao)
          esbJson.addParametro('tabela.versao', filtro.versao);
        if (filtro.tipoCompartilhamento)
          esbJson.addParametro('tabela.tipoCompartilhamento', filtro.tipoCompartilhamento);
        if (filtro.tabela) {
          if (filtro.tabela.nome)
            esbJson.addParametro('tabela.nome', filtro.tabela.nome);
        }
      }
      return esbJson;
    }
    $scope.meta = {};
    $scope.initControllerViaMapeamento = function (id) {
      var esbJson = new EsbJson(su);
      if (id) {
        esbJson.addParametro('id', id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/historico/terminologia/edit'
        }).success(function (data) {
          $scope.successConsulta(data);
        });
      }
    };
    $scope.initController = function (id) {
      var esbJson = new EsbJson(su);
      if (id) {
        esbJson.addParametro('id', id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/terminologia/edit'
        }).success(function (data) {
          $scope.successConsulta(data);
        });
      }
    };
    $scope.successConsulta = function (data) {
      $scope.terminologia = data.message.response.entidade;
      var isFirst = true;
      angular.forEach($scope.terminologia.mapReferencias, function (v, k) {
        if (v.length == 1 && isFirst) {
        }
        if (isFirst) {
          $scope.refActive = k;
          isFirst = false;
        }
      });
      isFirst = true;
      angular.forEach($scope.terminologia.mapOcupacoes, function (v, k) {
        if (isFirst) {
          $scope.ocupActive = k;
          isFirst = false;
        }
      });
      isFirst = true;
      angular.forEach($scope.terminologia.mapDiagnosticos, function (v, k) {
        if (isFirst) {
          $scope.diagActive = k;
          isFirst = false;
        }
      });
      $timeout(function () {
        $scope.paginacoes();
      }, 3000);
      $scope.paginatorList($scope.terminologia.allTerminologiasRef, 'paginationAllMapeamentosRef', 'paginationAllMapeamentosRef');
    };
    $scope.buscarReferencia = function (id) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/edit'
      }).success(function (data) {
        $scope.referencia = data.message.response.entidade;
        $timeout(function () {
          $scope.paginator($scope.referencia.mapOcupacoes, 'paginationRefOcup', 'refOcup');
          $scope.paginator($scope.referencia.mapDiagnosticos, 'paginationRefDiag', 'refDiag');
          $scope.paginatorList($scope.referencia.allTerminologiasRef, 'paginationAllMapeamentosRefRef', 'paginationAllMapeamentosRefRef' + $scope.referencia.id);
        }, 1000);
      });
    };
    $scope.selecionaReferencia = function (mapeamentos) {
      if (mapeamentos.length > 0 && mapeamentos.length == 1) {
        $scope.referencia = mapeamentos[0].this;
        $scope.buscarReferencia($scope.referencia.id);
      } else {
        $scope.referencia = null;
      }
    };
    $scope.alterarStatus = function () {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', $scope.terminologia.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/alterarstatus'
      }).success(function (data) {
        $('#cancelar').click();
      });
    };
    $scope.paginacoes = function () {
      $scope.paginator($scope.terminologia.mapOcupacoes, 'paginationOcupacao', 'ocup');
      $scope.paginator($scope.terminologia.mapDiagnosticos, 'paginationDiagnostico', 'diag');
    };
    $scope.paginator = function (map, clazzPaginador, preFix) {
      angular.forEach(map, function (v, k) {
        var key = preFix + k;
        var paginas = Math.ceil(v.length / 5);
        paginas = paginas === 0 ? 1 : paginas;
        $('.' + clazzPaginador + k).bootpag({
          total: paginas,
          page: 1,
          maxVisible: 5
        }).on('page', function (event, num) {
          $scope.paginar(key, v, num);
          $route.reload();
        });
        $scope.paginar(key, v, 1);
      });
    };
    $scope.paginar = function (key, list, num) {
      var qtde = 15;
      var length = list.length;
      var fromIndex = (num - 1) * qtde;
      var toIndex = fromIndex + qtde > length ? length : fromIndex + qtde;
      $scope.meta[key] = list.slice(fromIndex, toIndex);
    };
    $scope.replaced = function (string) {
      return string.replace(/__/g, '.').replace(/_/g, ' ');
    };
    $scope.paginatorList = function (list, clazzPaginador, preFix) {
      var key = preFix;
      var paginas = Math.ceil(list.length / 15);
      paginas = paginas === 0 ? 1 : paginas;
      $('.' + clazzPaginador).bootpag({
        total: paginas,
        page: 1,
        maxVisible: 5
      }).on('page', function (event, num) {
        $scope.paginar(key, list, num);
        $route.reload();
      });
      $scope.paginar(key, list, 1);
    };
  }
]);
app.controller('ConsultaVisualizacaoController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  '$timeout',
  '$route',
  function ($scope, $rootScope, $location, $http, $timeout, $route) {
    $rootScope.activetab = $location.path();
    $scope.meta = {};
    $scope.initControllerViaMapeamento = function (id) {
      var esbJson = new EsbJson(su);
      if (id) {
        esbJson.addParametro('id', id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/historico/terminologia/edit'
        }).success(function (data) {
          $scope.successConsulta(data);
        });
      }
    };
    $scope.initController = function (id) {
      var esbJson = new EsbJson(su);
      if (id) {
        esbJson.addParametro('id', id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/terminologia/edit'
        }).success(function (data) {
          $scope.successConsulta(data);
        });
      }
    };
    $scope.successConsulta = function (data) {
      $scope.terminologia = data.message.response.entidade;
      var isFirst = true;
      angular.forEach($scope.terminologia.mapReferencias, function (v, k) {
        if (v.length == 1 && isFirst) {
        }
        if (isFirst) {
          $scope.refActive = k;
          isFirst = false;
        }
      });
      isFirst = true;
      angular.forEach($scope.terminologia.mapOcupacoes, function (v, k) {
        if (isFirst) {
          $scope.ocupActive = k;
          isFirst = false;
        }
      });
      isFirst = true;
      angular.forEach($scope.terminologia.mapDiagnosticos, function (v, k) {
        if (isFirst) {
          $scope.diagActive = k;
          isFirst = false;
        }
      });
      $timeout(function () {
        $scope.paginacoes();
      }, 3000);
      $scope.paginatorList($scope.terminologia.allTerminologiasRef, 'paginationAllMapeamentosRef', 'paginationAllMapeamentosRef');
    };
    $scope.buscarReferencia = function (id) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/edit'
      }).success(function (data) {
        $scope.referencia = data.message.response.entidade;
        $timeout(function () {
          $scope.paginator($scope.referencia.mapOcupacoes, 'paginationRefOcup', 'refOcup');
          $scope.paginator($scope.referencia.mapDiagnosticos, 'paginationRefDiag', 'refDiag');
          $scope.paginatorList($scope.referencia.allTerminologiasRef, 'paginationAllMapeamentosRefRef', 'paginationAllMapeamentosRefRef' + $scope.referencia.id);
        }, 1000);
      });
    };
    $scope.selecionaReferencia = function (mapeamentos) {
      if (mapeamentos.length > 0 && mapeamentos.length == 1) {
        $scope.referencia = mapeamentos[0].this;
        $scope.buscarReferencia($scope.referencia.id);
      } else {
        $scope.referencia = null;
      }
    };
    $scope.alterarStatus = function () {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', $scope.terminologia.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/alterarstatus'
      }).success(function (data) {
        $('#cancelar').click();
      });
    };
    $scope.paginacoes = function () {
      $scope.paginator($scope.terminologia.mapOcupacoes, 'paginationOcupacao', 'ocup');
      $scope.paginator($scope.terminologia.mapDiagnosticos, 'paginationDiagnostico', 'diag');
    };
    $scope.paginator = function (map, clazzPaginador, preFix) {
      angular.forEach(map, function (v, k) {
        var key = preFix + k;
        var paginas = Math.ceil(v.length / 5);
        paginas = paginas === 0 ? 1 : paginas;
        $('.' + clazzPaginador + k).bootpag({
          total: paginas,
          page: 1,
          maxVisible: 5
        }).on('page', function (event, num) {
          $scope.paginar(key, v, num);
          $route.reload();
        });
        $scope.paginar(key, v, 1);
      });
    };
    $scope.paginar = function (key, list, num) {
      var qtde = 15;
      var length = list.length;
      var fromIndex = (num - 1) * qtde;
      var toIndex = fromIndex + qtde > length ? length : fromIndex + qtde;
      $scope.meta[key] = list.slice(fromIndex, toIndex);
    };
    $scope.replaced = function (string) {
      return string.replace(/__/g, '.').replace(/_/g, ' ');
    };
    $scope.paginatorList = function (list, clazzPaginador, preFix) {
      var key = preFix;
      var paginas = Math.ceil(list.length / 15);
      paginas = paginas === 0 ? 1 : paginas;
      $('.' + clazzPaginador).bootpag({
        total: paginas,
        page: 1,
        maxVisible: 5
      }).on('page', function (event, num) {
        $scope.paginar(key, list, num);
        $route.reload();
      });
      $scope.paginar(key, list, 1);
    };
  }
]);
app.controller('GerenciarConfiguracaoModuloController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.title = null;
    $scope.projetosView = null;
    $scope.modulosView = null;
    $scope.modulosFormView = null;
    $scope.configuracao = {};
    $scope.projtoFiltro = null;
    $scope.moduloFiltro = null;
    $scope.isVisualizacao = false;
    $scope.isHabilitarBlocoCRUD = false;
    $scope.ativarBtnSalvar = false;
    $scope.ativarBtnExcluir = false;
    $scope.ativarBtnAlterarStatus = false;
    $scope.initController = function () {
      $scope.executaBusca();
    };
    $scope.executaBusca = function () {
      esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/projeto/'
      }).success(function (data) {
        $scope.projetos = data.message.response.list;
        $scope.projetosView = $scope.projetos;
      });
      esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/modulo/'
      }).success(function (data) {
        $scope.modulos = data.message.response.list;
        $scope.modulosView = $scope.modulos;
      });
    };
    $scope.filtrarModulos = function () {
      var projeto = $scope.getData('#selectProjeto', $scope.projetosView);
      $scope.modulosView = [];
      if (projeto) {
        angular.forEach($scope.modulos, function (v) {
          if (v.projeto.id == projeto.id) {
            $scope.modulosView.push(v);
          }
        });
      } else {
        $scope.modulosView = $scope.modulos;
      }
    };
    $scope.filtrarModulosForm = function () {
      var projeto = $scope.getData('#selectProjetoForm', $scope.projetos);
      $scope.modulosFormView = [];
      if (projeto) {
        angular.forEach($scope.modulos, function (v) {
          if (v.projeto.id == projeto.id) {
            $scope.modulosFormView.push(v);
          }
        });
      } else {
        $scope.modulosFormView = $scope.modulos;
      }
    };
    $scope.incluir = function () {
      $scope.common('Adicionar', {});
      $scope.ativarBtnSalvar = true;
    };
    $scope.alterar = function (data) {
      if (data) {
        $scope.common('Alterar', data);
        $scope.projetoFormSelecionado = data.modulo.projeto;
        angular.forEach(data.permissoes, function (vc) {
          angular.forEach(data.modulo.permissoes, function (vm) {
            if (vm.id == vc.id) {
              vm.selecionado = true;
            }
          });
        });
        $scope.ativarBtnSalvar = true;
      }
    };
    $scope.excluir = function (data) {
      if (data) {
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnExcluir = true;
      }
    };
    $scope.common = function (title, data) {
      $scope.limpar();
      $scope.configuracao = data;
      $scope.title = title;
      $scope.isHabilitarBlocoCRUD = true;
    };
    $scope.limpar = function () {
      $scope.title = null;
      $scope.configuracao = {};
      $scope.projetoFormSelecionado = null;
      $scope.isVisualizacao = false;
      $scope.isHabilitarBlocoCRUD = false;
      $scope.ativarBtnSalvar = false;
      $scope.ativarBtnExcluir = false;
      $scope.ativarBtnAlterarStatus = false;
      $scope.projtoFiltro = null;
      $scope.moduloFiltro = null;
      $scope.modulosView = null;
      $scope.modulosFormView = null;
    };
    $scope.getData = function (name, list) {
      var index = $(name).val();
      if (index) {
        index = parseInt(index, 10);
        return list[index];
      } else {
        return null;
      }
    };
    $scope.deletar = function (configuracao) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', configuracao.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/configuracao/delete'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.salvar = function () {
      var esbJson = new EsbJson(su);
      esbJson.addToSave($scope.configuracao);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/configuracao/save'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
  }
]);
app.controller('GerenciarEmpresaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.title = null;
    $scope.empresa = null;
    $scope.isVisualizacao = false;
    $scope.isHabilitarBlocoCRUD = false;
    $scope.ativarBtnSalvar = false;
    $scope.ativarBtnExcluir = false;
    $scope.ativarBtnAlterarStatus = false;
    $scope.initController = function () {
      $scope.executaBusca();
    };
    $scope.executaBusca = function () {
      esbJson = new EsbJson(su);
      esbJson.addSu(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/'
      }).success(function (data) {
        $scope.empresas = data.message.response.list;
      });
    };
    $scope.incluir = function () {
      $scope.common('Adicionar', {});
      $scope.ativarBtnSalvar = true;
    };
    $scope.alterar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Alterar', data);
        $scope.ativarBtnSalvar = true;
      }
    };
    $scope.excluir = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnExcluir = true;
      }
    };
    $scope.ativarOrDesativar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.status = data.status == 'ATIVO' ? 'Inativar' : 'Ativar';
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnAlterarStatus = true;
      }
    };
    $scope.common = function (title, data) {
      $scope.empresa = data;
      $scope.limpar();
      $scope.title = title;
      $scope.isHabilitarBlocoCRUD = true;
    };
    $scope.limpar = function () {
      $scope.title = null;
      $scope.isVisualizacao = false;
      $scope.isHabilitarBlocoCRUD = false;
      $scope.ativarBtnSalvar = false;
      $scope.ativarBtnExcluir = false;
      $scope.ativarBtnAlterarStatus = false;
      $('select').select2();
    };
    $scope.getData = function () {
      var index = $('select').val();
      if (index) {
        index = parseInt(index, 10);
        return $scope.empresas[index];
      }
    };
    $scope.deletar = function (empresa) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', empresa.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/delete'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.alternarStatus = function (empresa) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', empresa.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/alterarstatus'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.salvar = function (empresa) {
      var esbJson = new EsbJson(su);
      esbJson.addToSave(empresa);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/save'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
  }
]);
app.controller('GerenciarModuloController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  '$timeout',
  function ($scope, $rootScope, $location, $http, $timeout) {
    $rootScope.activetab = $location.path();
    $scope.title = null;
    $scope.modulo = {};
    $scope.isVisualizacao = false;
    $scope.isHabilitarBlocoCRUD = false;
    $scope.ativarBtnSalvar = false;
    $scope.ativarBtnExcluir = false;
    $scope.ativarBtnAlterarStatus = false;
    $scope.acoesSelected = {};
    $scope.permissao = {};
    $scope.initController = function () {
      $scope.executaBusca();
      $scope.executaBuscaProjetos();
    };
    $scope.executaBusca = function () {
      var esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/modulo/'
      }).success(function (data) {
        $scope.modulos = data.message.response.list;
      });
    };
    $scope.executaBuscaProjetos = function () {
      var esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/projeto/'
      }).success(function (data) {
        $scope.projetos = data.message.response.list;
      });
    };
    $scope.incluir = function () {
      $scope.modulo = {};
      $scope.common('Adicionar', null);
      $scope.ativarBtnSalvar = true;
    };
    $scope.alterar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Alterar', data);
        $scope.ativarBtnSalvar = true;
      }
    };
    $scope.excluir = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnExcluir = true;
      }
    };
    $scope.ativarOrDesativar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.status = data.status == 'ATIVO' ? 'Inativar' : 'Ativar';
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnAlterarStatus = true;
      }
    };
    $scope.common = function (title, data) {
      $scope.limpar();
      $scope.title = title;
      $scope.isHabilitarBlocoCRUD = true;
      if (data) {
        var esbJson = new EsbJson(su);
        esbJson.addParametro('id', data.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/modulo/edit'
        }).success(function (data) {
          $scope.modulo = data.message.response.entidade;
        });
      }
    };
    $scope.limpar = function () {
      $scope.title = null;
      $scope.isVisualizacao = false;
      $scope.isHabilitarBlocoCRUD = false;
      $scope.ativarBtnSalvar = false;
      $scope.ativarBtnExcluir = false;
      $scope.ativarBtnAlterarStatus = false;
      $('#selectModulo').select2();
    };
    $scope.getData = function () {
      var index = $('#selectModulo').val();
      if (index) {
        index = parseInt(index, 10);
        return $scope.modulos[index];
      }
    };
    $scope.deletar = function (modulo) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', modulo.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/modulo/delete'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.alternarStatus = function (modulo) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', modulo.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/modulo/alterarstatus'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.salvar = function (modulo) {
      var index = $('#selectProjeto').val();
      if (index) {
        index = parseInt(index, 10);
      }
      var projeto = modulo.id == null ? $scope.projetos[index] : modulo.projeto;
      if (projeto) {
        var esbJson = new EsbJson(su);
        modulo.projeto = projeto;
        esbJson.addToSave(modulo);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/modulo/save'
        }).success(function (data) {
          $scope.limpar();
          $scope.executaBusca();
        });
      }
    };
    $scope.adicionarPermissao = function (permissao) {
      if (permissao.descricao && permissao.chave) {
        if (!$scope.modulo.permissoes) {
          $scope.modulo.permissoes = [];
        }
        var perm = {};
        perm.descricao = permissao.descricao;
        perm.chave = permissao.chave;
        $scope.modulo.permissoes.push(perm);
        $scope.permissao = {};
      }
    };
  }
]);
app.controller('GerenciarPerfilController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.title = null;
    $scope.perfil = {};
    $scope.projetos = null;
    $scope.modulos = null;
    $scope.empresas = null;
    $scope.configuracoes = null;
    $scope.projetosEmpresas = null;
    $scope.isVisualizacao = false;
    $scope.isHabilitarBlocoCRUD = false;
    $scope.ativarBtnSalvar = false;
    $scope.ativarBtnExcluir = false;
    $scope.ativarBtnAlterarStatus = false;
    $scope.initController = function () {
      $scope.executaBusca();
    };
    $scope.executaBusca = function () {
      esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/perfil/'
      }).success(function (data) {
        $scope.perfis = data.message.response.list;
      });
    };
    $scope.filtrarListas = function () {
      $scope.limparListas();
      esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/'
      }).success(function (data) {
        $scope.empresas = data.message.response.list;
      });
    };
    $scope.filtrarProjetos = function () {
      $scope.projetos = [];
      $scope.resetPerfil();
      var empresa = $scope.getData('#selectEmpresa', $scope.empresas);
      if (empresa) {
        esbJson = new EsbJson(su);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/projeto/'
        }).success(function (data) {
          $scope.projetos = data.message.response.list;
        });
      }
    };
    $scope.filtrarModulos = function () {
      $scope.resetPerfil();
      $scope.configuracoes = [];
      var projeto = $scope.getData('#selectProjeto', $scope.projetos);
      if (projeto) {
        esbJson = new EsbJson(su);
        esbJson.addParametro('projeto.id', projeto.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/modulo/'
        }).success(function (data) {
          $scope.modulos = data.message.response.list;
        });
      }
    };
    $scope.changeModulo = function () {
      $scope.configuracoes = [];
      var modulo = $scope.getData('#selectModulo', $scope.modulos);
      if (modulo) {
        angular.forEach(modulo.configuracoes, function (vc) {
          vc.selecionado = false;
          $scope.configuracoes.push(vc);
        });
      }
    };
    $scope.resetPerfil = function () {
      $scope.perfil.configuracoes = [];
      $scope.modulos = [];
    };
    $scope.adicionarConfiguracoes = function () {
      angular.forEach($scope.configuracoes, function (v) {
        var addToList = true;
        v.selecionado = false;
        angular.forEach($scope.perfil.configuracoes, function (vin) {
          if (vin.id == v.id) {
            addToList = false;
          }
        });
        if (addToList) {
          var configuracao = angular.copy(v);
          configuracao.selecionado = false;
          $scope.perfil.configuracoes.push(configuracao);
          addToList = false;
        }
      });
    };
    $scope.removerConfiguracao = function (index) {
      $scope.perfil.configuracoes.splice(index, 1);
    };
    $scope.incluir = function () {
      $scope.common('Adicionar', {});
      $scope.perfil.configuracoes = [];
      $scope.ativarBtnSalvar = true;
    };
    $scope.alterar = function () {
      esbJson = new EsbJson(su);
      esbJson.addParametro('id', $scope.filtroPerfil.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/perfil/edit'
      }).success(function (data) {
        $scope.perfil = data.message.response.entidade;
        $scope.common('Alterar', $scope.perfil);
        $scope.ativarBtnSalvar = true;
        esbJson = new EsbJson(su);
        esbJson.addParametro('projeto.id', $scope.perfil.projetoEmpresa.projeto.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/modulo/'
        }).success(function (data) {
          $scope.modulos = data.message.response.list;
        });
      });
    };
    $scope.common = function (title, data) {
      $scope.perfil = data;
      $scope.limpar();
      $scope.title = title;
      $scope.isHabilitarBlocoCRUD = true;
      $scope.filtrarListas();
    };
    $scope.limpar = function () {
      $scope.title = null;
      $scope.isVisualizacao = false;
      $scope.isHabilitarBlocoCRUD = false;
      $scope.ativarBtnSalvar = false;
      $scope.ativarBtnExcluir = false;
      $scope.ativarBtnAlterarStatus = false;
      $scope.limparListas();
    };
    $scope.limparListas = function () {
      $scope.projetos = [];
      $scope.modulos = [];
      $scope.configuracoes = [];
      $scope.empresas = [];
      $scope.projetosEmpresas = [];
    };
    $scope.getData = function (name, list) {
      var index = $(name).val();
      if (index) {
        index = parseInt(index, 10);
        return list[index];
      } else {
        return null;
      }
    };
    $scope.salvar = function (perfil) {
      var esbJson = new EsbJson(su);
      esbJson.addToSave(perfil);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/perfil/save'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
  }
]);
app.controller('GerenciarProjetoController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.title = null;
    $scope.projeto = null;
    $scope.isVisualizacao = false;
    $scope.isHabilitarBlocoCRUD = false;
    $scope.ativarBtnSalvar = false;
    $scope.ativarBtnExcluir = false;
    $scope.ativarBtnAlterarStatus = false;
    $scope.initController = function () {
      $scope.executaBusca();
      $scope.executaBuscaEmpresas();
    };
    $scope.executaBusca = function () {
      esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/projeto/'
      }).success(function (data) {
        $scope.projetos = data.message.response.list;
      });
    };
    $scope.executaBuscaEmpresas = function () {
      var esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/'
      }).success(function (data) {
        $scope.empresas = data.message.response.list;
      });
    };
    $scope.incluir = function () {
      $scope.projeto = {};
      $scope.projeto.empresas = [];
      $scope.common('Adicionar', null);
      $scope.ativarBtnSalvar = true;
    };
    $scope.alterar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Alterar', data);
        $scope.ativarBtnSalvar = true;
      }
    };
    $scope.excluir = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnExcluir = true;
      }
    };
    $scope.ativarOrDesativar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.status = data.status == 'ATIVO' ? 'Inativar' : 'Ativar';
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnAlterarStatus = true;
      }
    };
    $scope.common = function (title, data) {
      $scope.limpar();
      $scope.title = title;
      $scope.isHabilitarBlocoCRUD = true;
      if (data) {
        var esbJson = new EsbJson(su);
        esbJson.addParametro('id', data.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/projeto/edit'
        }).success(function (data) {
          $scope.projeto = data.message.response.entidade;
          if (!$scope.projeto.empresas) {
            $scope.projeto.empresas = [];
          }
        });
      }
    };
    $scope.limpar = function () {
      $scope.title = null;
      $scope.isVisualizacao = false;
      $scope.isHabilitarBlocoCRUD = false;
      $scope.ativarBtnSalvar = false;
      $scope.ativarBtnExcluir = false;
      $scope.ativarBtnAlterarStatus = false;
      $('#selectProjeto').select2();
    };
    $scope.getData = function () {
      var index = $('#selectProjeto').val();
      if (index) {
        index = parseInt(index, 10);
        return $scope.projetos[index];
      }
    };
    $scope.deletar = function (projeto) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', projeto.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/projeto/delete'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.alternarStatus = function (projeto) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', projeto.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/projeto/alterarstatus'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.salvar = function (projeto) {
      var esbJson = new EsbJson(su);
      esbJson.addToSave(projeto);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/projeto/save'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.selecionarEmpresa = function () {
      var index = $('#selectEmpresa').val();
      if (index) {
        index = parseInt(index, 10);
        var empresa = $scope.empresas[index];
        $scope.projeto.empresas.push(empresa);
        $scope.empresas.splice(index, 1);
        $('#selectEmpresa').select2();
      }
    };
    $scope.excluirEmpresa = function (index) {
      var empresa = $scope.projeto.empresas[index];
      $scope.empresas.push(empresa);
      $scope.projeto.empresas.splice(index, 1);
      $('#selectEmpresa').select2();
    };
  }
]);
app.controller('GerenciarTemaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.initController = function () {
      $('.select').select2();
      var filldata = [
          'STATUS',
          'TIPO_COMPARTILHAMENTO',
          'TABELA'
        ];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.statuss = data.message.response.STATUS;
        $scope.tabelas = data.message.response.TABELA;
        $scope.tabelasRaw = data.message.response.TABELA;
        $scope.tiposCompartilhamentos = data.message.response.TIPO_COMPARTILHAMENTO;
      });
    };
    $('.data-tema').select2({
      ajax: {
        url: '/etermws/terminologia/',
        type: 'POST',
        params: { contentType: 'application/json;charset=UTF-8' },
        delay: 5000,
        data: function (params) {
          var esbJson = new EsbJson(su);
          esbJson.addParametro('codigo', params);
          return esbJson.toString();
        },
        results: function (data, page, params) {
          params.page = params.page || 1;
          return {
            results: data.message.response.list,
            pagination: { more: params.page * 30 < data.total_count }
          };
        },
        cache: true
      },
      escapeMarkup: function (markup) {
        return markup;
      },
      minimumInputLength: 5,
      templateResult: formatRepo,
      templateSelection: formatRepoSelection
    });
    function formatRepo(repo) {
      if (repo.loading)
        return repo.descricao;
      var markup = '<div class=\'select2-result-repository clearfix\'>' + '<div class=\'select2-result-repository__meta\'>' + '<div class=\'select2-result-repository__title\'>' + repo.codigo + ' - ' + repo.descricao + ' - ' + repo.tabela.nome + ' ' + repo.tabela.versao + '</div>';
      if (repo.description) {
        markup += '<div class=\'select2-result-repository__description\'>' + repo.codigo + '</div>';
      }
      return markup;
    }
    function formatRepoSelection(repo) {
      return repo.codigo || repo.descricao;
    }
  }
]);
app.controller('GerenciarUsuarioController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  '$timeout',
  function ($scope, $rootScope, $location, $http, $timeout) {
    $rootScope.activetab = $location.path();
    $scope.title = null;
    $scope.usuario = null;
    $scope.isVisualizacao = false;
    $scope.isHabilitarBlocoCRUD = false;
    $scope.ativarBtnSalvar = false;
    $scope.ativarBtnExcluir = false;
    $scope.ativarBtnAlterarStatus = false;
    $scope.initController = function () {
      $scope.executaBusca();
      $scope.executaBuscaEmpresas();
      var filldata = ['SEXO'];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.sexos = data.message.response.SEXO;
      });
    };
    $scope.executaBusca = function () {
      var esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/usuario/'
      }).success(function (data) {
        $scope.usuarios = data.message.response.list;
      });
    };
    $scope.executaBuscaEmpresas = function () {
      var esbJson = new EsbJson(su);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/empresa/'
      }).success(function (data) {
        $scope.empresas = data.message.response.list;
      });
    };
    $scope.adicionarPerfil = function () {
      if (!$scope.usuario.perfis) {
        $scope.usuario.perfis = [];
      }
      var perfil = $scope.perfilFiltro;
      perfil.selecionado = true;
      if (!$scope.containsObject(perfil)) {
        $scope.usuario.perfis.push(perfil);
      }
    };
    $scope.containsObject = function (obj) {
      var i;
      for (i = 0; i < $scope.usuario.perfis.length; i++) {
        if (angular.equals($scope.usuario.perfis[i].id, obj.id)) {
          return true;
        }
      }
      return false;
    };
    $scope.incluir = function () {
      $scope.usuario = {};
      $scope.usuario.empresas = [];
      $scope.common('Adicionar', null);
      $scope.ativarBtnSalvar = true;
    };
    $scope.alterar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.common('Alterar', data);
        $scope.ativarBtnSalvar = true;
      }
    };
    $scope.ativarOrDesativar = function () {
      var data = $scope.getData();
      if (data) {
        $scope.status = data.status == 'ATIVO' ? 'Inativar' : 'Ativar';
        $scope.common('Visualizar', data);
        $scope.isVisualizacao = true;
        $scope.ativarBtnAlterarStatus = true;
      }
    };
    $scope.common = function (title, data) {
      $scope.limpar();
      $scope.title = title;
      $scope.isHabilitarBlocoCRUD = true;
      if (data) {
        var esbJson = new EsbJson(su);
        esbJson.addParametro('id', data.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/usuario/edit'
        }).success(function (data) {
          $scope.usuario = data.message.response.entidade;
        });
      }
    };
    $scope.limpar = function () {
      $scope.title = null;
      $scope.isVisualizacao = false;
      $scope.isHabilitarBlocoCRUD = false;
      $scope.ativarBtnSalvar = false;
      $scope.ativarBtnExcluir = false;
      $scope.ativarBtnAlterarStatus = false;
    };
    $scope.getData = function () {
      var index = $('#selectUsuario').val();
      if (index) {
        index = parseInt(index, 10);
        return $scope.usuarios[index];
      }
    };
    $scope.alternarStatus = function (usuario) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', usuario.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/usuario/alterarstatus'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.salvar = function (usuario) {
      var esbJson = new EsbJson(su);
      esbJson.addToSave(usuario);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/gestaousuario/usuario/save'
      }).success(function (data) {
        $scope.limpar();
        $scope.executaBusca();
      });
    };
    $scope.selecionarEmpresa = function () {
      var index = $('#selectEmpresa').val();
      if (index) {
        index = parseInt(index, 10);
        var empresa = $scope.empresas[index];
        var esbJson = new EsbJson(su);
        esbJson.addParametro('empresa.id', empresa.id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/gestaousuario/perfil/'
        }).success(function (data) {
          $scope.perfis = data.message.response.list;
        });
      }
    };
    // remover
    $scope.excluirEmpresa = function (index) {
      var empresa = $scope.usuario.empresas[index].empresa;
      $scope.empresas.push(empresa);
      $scope.usuario.empresas.splice(index, 1);
    };
  }
]);
app.controller('HomeController', [
  '$scope',
  '$rootScope',
  '$location',
  function ($scope, $rootScope, $location) {
    $rootScope.activetab = $location.path();
  }
]);
app.controller('IndexController', [
  '$scope',
  '$rootScope',
  '$location',
  function ($scope, $rootScope, $location) {
    $rootScope.activetab = $location.path();
    $scope.initController = function (isError) {
      if (isError == 'true') {
        $scope.isError = isError;
      }
    };
  }
]);
app.controller('ManutencaoController', [
  '$scope',
  '$rootScope',
  '$location',
  function ($scope, $rootScope, $location) {
    $rootScope.activetab = $location.path();
  }
]);
app.controller('MapeamentoBuscaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    var lock = false;
    $scope.filtro = {};
    $scope.initController = function () {
      var filldata = [
          'STATUS',
          'TIPO_COMPARTILHAMENTO',
          'TABELA_DISTINCT'
        ];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.statuss = data.message.response.STATUS;
        $scope.tabelas = data.message.response.TABELA_DISTINCT;
        $scope.tiposCompartilhamentos = data.message.response.TIPO_COMPARTILHAMENTO;
      });
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = $scope.createJson(filtro, num);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/'
      }).success(function (data) {
        $scope.terminologias = data.message.response.list;
        $scope.filtroAtual = filtro;
        $scope.paginador(data.message.response.size, num + 1);
        lock = false;
      }).error(function (data, status) {
      });
    };
    $scope.paginador = function (size, paginaAtual) {
      var paginas = Math.ceil(size / 20);
      paginas = paginas === 0 ? 1 : paginas;
      $('.paginador').bootpag({
        total: paginas,
        page: paginaAtual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.createJson = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(20, num, true, null, null);
      if (filtro) {
        if (filtro.codigo)
          esbJson.addParametro('codigo', filtro.codigo);
        if (filtro.inicioVigencia)
          esbJson.addParametro('inicioVigencia', filtro.inicioVigencia);
        if (filtro.fimVigencia)
          esbJson.addParametro('fimVigencia', filtro.fimVigencia);
        if (filtro.termo)
          esbJson.addParametro('termoFormatado', filtro.termo);
        if (filtro.descricao)
          esbJson.addParametro('definicaoFormatado', filtro.descricao);
        if (filtro.status)
          esbJson.addParametro('status', filtro.status);
        if (filtro.versao)
          esbJson.addParametro('tabela.versao', filtro.versao);
        if (filtro.tipoCompartilhamento)
          esbJson.addParametro('tabela.tipoCompartilhamento', filtro.tipoCompartilhamento);
        if (filtro.tabela) {
          if (filtro.tabela.nome)
            esbJson.addParametro('tabela.nome', filtro.tabela.nome);
        }
      }
      return esbJson;
    };
    $scope.reset = function () {
      $scope.filtro = {};
    };
  }
]);
app.controller('MapeamentoCadastroController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  '$timeout',
  '$route',
  function ($scope, $rootScope, $location, $http, $timeout, $route) {
    $rootScope.activetab = $location.path();
    var lock = false;
    $scope.mapTipoMapeamento = null;
    $scope.mapEquivalencia = null;
    $scope.busca = {};
    $scope.meta = {};
    $scope.initControllerMapeamento = function (id) {
      var etermJsonw = new EsbJson(su);
      etermJsonw.addParametro('id', id);
      $http({
        method: 'POST',
        data: etermJsonw.toString(),
        url: '/etermws/terminologia/edit'
      }).success(function (data) {
        $scope.terminologiaBase = data.message.response.entidade;
        $scope.terminologiaBase.terminologiasPara = $scope.terminologiaBase.allTerminologiasPara;
        if ($scope.terminologiaBase.terminologiasPara === null) {
          $scope.terminologiaBase.terminologiasPara = [];
        }
      });
      var filldata = [
          'TIPO_COMPARTILHAMENTO',
          'TABELA_DISTINCT',
          'TIPO_MAPAEMENTO',
          'EQUIVALENCIA'
        ];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.tabelas = data.message.response.TABELA_DISTINCT;
        $scope.tiposMapeamentos = data.message.response.TIPO_MAPAEMENTO;
        $scope.tiposCompartilhamentos = data.message.response.TIPO_COMPARTILHAMENTO;
        $scope.equivalencias = data.message.response.EQUIVALENCIA;
      });
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(10, num, true, null, null);
      esbJson.addParametro('status', 'ATIVO');
      if (filtro) {
        if (filtro.codigo)
          esbJson.addParametro('codigo', filtro.codigo);
        if (filtro.inicioVigencia)
          esbJson.addParametro('inicioVigencia', filtro.inicioVigencia);
        if (filtro.fimVigencia)
          esbJson.addParametro('fimVigencia', filtro.fimVigencia);
        if (filtro.termo)
          esbJson.addParametro('termoFormatado', filtro.termo);
        if (filtro.descricao)
          esbJson.addParametro('definicaoFormatado', filtro.descricao);
        if (filtro.versao)
          esbJson.addParametro('tabela.versao', filtro.versao);
        if (filtro.tipoCompartilhamento)
          esbJson.addParametro('tabela.tipoCompartilhamento', filtro.tipoCompartilhamento);
        if (filtro.tabela) {
          if (filtro.tabela.nome)
            esbJson.addParametro('tabela.nome', filtro.tabela.nome);
        }
      }
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/'
      }).success(function (data) {
        $scope.terminologias = data.message.response.list;
        $scope.filtroAtual = filtro;
        $scope.paginacaoMap(data.message.response.size, num + 1);
        angular.forEach($scope.terminologias, function (v) {
          angular.forEach($scope.terminologiaBase.terminologiasPara, function (vMap) {
            if (vMap.terminologiaPara.id === v.id) {
              v.selecionado = true;
            }
          });
        });
        lock = false;
      });
    };
    $scope.paginacaoMap = function (size, atual) {
      var paginas = Math.ceil(size / 10);
      paginas = paginas === 0 ? 1 : paginas;
      $('.pagination').bootpag({
        total: paginas,
        page: atual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.selecionar = function (index) {
      var terminologia = $scope.terminologias[index];
      $scope.terminologiaSelecionada = terminologia;
      $scope.index = index;
    };
    $scope.cancelarMapeamento = function () {
      $scope.mapTipoMapeamento = null;
      $scope.mapEquivalencia = null;
    };
    $scope.adicionarMapeamento = function () {
      var mapeamento = {};
      mapeamento.terminologiaPara = $scope.terminologiaSelecionada;
      mapeamento.tipoMapeamento = $scope.mapTipoMapeamento;
      mapeamento.equivalencia = $scope.mapEquivalencia;
      var terminologia = $scope.terminologias[$scope.index];
      terminologia.selecionado = true;
      $scope.terminologiaBase.terminologiasPara.push(mapeamento);
      $scope.cancelarMapeamento();
    };
    $scope.excluirMapeamento = function (indexMapeado) {
      var mapeamento = $scope.terminologiaBase.terminologiasPara[indexMapeado];
      $scope.terminologiaBase.terminologiasPara.splice(indexMapeado, 1);
      angular.forEach($scope.terminologias, function (v) {
        if (v.id == mapeamento.terminologiaPara.id) {
          v.selecionado = false;
        }
      });
    };
    $scope.salvar = function (historicoMudanca) {
      if (!$scope.terminologiaBase.historicoMudancas) {
        $scope.terminologiaBase.historicoMudancas = [];
      }
      $scope.terminologiaBase.historicoMudancas.push(historicoMudanca);
      var esbJson = new EsbJson(su);
      esbJson.addToSave($scope.terminologiaBase);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/save'
      }).success(function (data) {
        $('#cancelar').click();
      });
    };
    $scope.reset = function () {
      $scope.busca = {};
    };
    // ###########################################################33
    $scope.initControllerViaMapeamento = function (id) {
      if (id) {
        var esbJson = new EsbJson(su);
        esbJson.addParametro('id', id);
        $http({
          method: 'POST',
          data: esbJson.toString(),
          url: '/etermws/historico/terminologia/edit'
        }).success(function (data) {
          $scope.successConsulta(data);
        });
      }
    };
    $scope.successConsulta = function (data) {
      $scope.terminologia = data.message.response.entidade;
      var isFirst = true;
      angular.forEach($scope.terminologia.mapReferencias, function (v, k) {
        if (v.length == 1 && isFirst) {
        }
        if (isFirst) {
          $scope.refActive = k;
          isFirst = false;
        }
      });
      isFirst = true;
      angular.forEach($scope.terminologia.mapOcupacoes, function (v, k) {
        if (isFirst) {
          $scope.ocupActive = k;
          isFirst = false;
        }
      });
      isFirst = true;
      angular.forEach($scope.terminologia.mapDiagnosticos, function (v, k) {
        if (isFirst) {
          $scope.diagActive = k;
          isFirst = false;
        }
      });
      $timeout(function () {
        $scope.paginacoes();
      }, 3000);
      $scope.paginatorList($scope.terminologia.allTerminologiasRef, 'paginationAllMapeamentosRef', 'paginationAllMapeamentosRef');
    };
    $scope.buscarReferencia = function (id) {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/edit'
      }).success(function (data) {
        $scope.referencia = data.message.response.entidade;
        $timeout(function () {
          $scope.paginator($scope.referencia.mapOcupacoes, 'paginationRefOcup', 'refOcup');
          $scope.paginator($scope.referencia.mapDiagnosticos, 'paginationRefDiag', 'refDiag');
          $scope.paginatorList($scope.referencia.allTerminologiasRef, 'paginationAllMapeamentosRefRef', 'paginationAllMapeamentosRefRef' + $scope.referencia.id);
        }, 1000);
      });
    };
    $scope.selecionaReferencia = function (mapeamentos) {
      if (mapeamentos.length > 0 && mapeamentos.length == 1) {
        $scope.referencia = mapeamentos[0].this;
        $scope.buscarReferencia($scope.referencia.id);
      } else {
        $scope.referencia = null;
      }
    };
    $scope.alterarStatus = function () {
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', $scope.terminologia.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/terminologia/alterarstatus'
      }).success(function (data) {
        $('#cancelar').click();
      });
    };
    $scope.paginacoes = function () {
      $scope.paginator($scope.terminologia.mapOcupacoes, 'paginationOcupacao', 'ocup');
      $scope.paginator($scope.terminologia.mapDiagnosticos, 'paginationDiagnostico', 'diag');
    };
    $scope.paginator = function (map, clazzPaginador, preFix) {
      angular.forEach(map, function (v, k) {
        var key = preFix + k;
        var paginas = Math.ceil(v.length / 5);
        paginas = paginas === 0 ? 1 : paginas;
        $('.' + clazzPaginador + k).bootpag({
          total: paginas,
          page: 1,
          maxVisible: 5
        }).on('page', function (event, num) {
          $scope.paginar(key, v, num);
          $route.reload();
        });
        $scope.paginar(key, v, 1);
      });
    };
    $scope.paginar = function (key, list, num) {
      var qtde = 5;
      var length = list.length;
      var fromIndex = (num - 1) * qtde;
      var toIndex = fromIndex + qtde > length ? length : fromIndex + qtde;
      $scope.meta[key] = list.slice(fromIndex, toIndex);
    };
    $scope.replaced = function (string) {
      return string.replace(/__/g, '.').replace(/_/g, ' ');
    };
    $scope.paginatorList = function (list, clazzPaginador, preFix) {
      var key = preFix;
      var paginas = Math.ceil(list.length / 15);
      paginas = paginas === 0 ? 1 : paginas;
      $('.' + clazzPaginador).bootpag({
        total: paginas,
        page: 1,
        maxVisible: 5
      }).on('page', function (event, num) {
        $scope.paginar(key, list, num);
        $route.reload();
      });
      $scope.paginar(key, list, 1);
    };
  }
]);
app.controller('TabelaBuscaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.filtro = {};
    $scope.initController = function () {
      var filldata = [
          'STATUS',
          'TIPO_COMPARTILHAMENTO'
        ];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.statuss = data.message.response.STATUS;
        $scope.tipoCompartilhamentos = data.message.response.TIPO_COMPARTILHAMENTO;
        $scope.buscar(null);
      });
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(15, num, true, 'nome', null);
      if (filtro) {
        if (filtro.tipoCompartilhamento)
          esbJson.addParametro('tipoCompartilhamento', filtro.tipoCompartilhamento);
        if (filtro.nome)
          esbJson.addParametro('nome', filtro.nome);
        if (filtro.versao)
          esbJson.addParametro('versao', filtro.versao);
        if (filtro.inicioVigencia)
          esbJson.addParametro('inicioVigencia', filtro.inicioVigencia);
        if (filtro.fimVigencia)
          esbJson.addParametro('fimVigencia', filtro.fimVigencia);
        if (filtro.status)
          esbJson.addParametro('status', filtro.status);
      }
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/tabelaterminologia/'
      }).success(function (data) {
        $scope.tabelas = data.message.response.list;
        $scope.paginador(data.message.response.size, num + 1);
        lock = false;
        $('.pagination').show();
      }).error(function (data, status) {
      });
    };
    $scope.paginador = function (size, paginaAtual) {
      var paginas = Math.ceil(size / 20);
      $('.pagination').bootpag({
        total: paginas,
        page: paginaAtual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.trocarStatus = function (index) {
      var tabela = $scope.tabelas[index];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', tabela.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/tabelaterminologia/alterarstatus'
      }).success(function (data) {
        $scope.tabelas[index] = data.message.response.entidade;
      }).error(function (data, status) {
      });
    };
    $scope.reset = function () {
      $scope.filtro = {};
      $scope.executaBusca($scope.filtro, 0);
    };
  }
]);
app.controller('TabelaCadastroController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    var lock = false;
    $scope.filtroAtual = null;
    $scope.metasParams = [];
    $scope.customTemplate = false;
    $scope.initController = function (id) {
      var esbJson = new EsbJson(su);
      var filldata = [
          'TIPO_COMPARTILHAMENTO',
          'TIPO_METADADO',
          'TEMPLATES_METADADOS'
        ];
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.templates = data.message.response.TEMPLATES_METADADOS;
        $scope.tiposMetadados = data.message.response.TIPO_METADADO;
        $scope.tipos = data.message.response.TIPO_COMPARTILHAMENTO;
        if (id != 'null') {
          esbJson = new EsbJson(su);
          esbJson.addParametro('id', id);
          $http({
            method: 'POST',
            data: esbJson.toString(),
            url: '/etermws/tabelaterminologia/edit'
          }).success(function (data) {
            $scope.tabela = data.message.response.entidade;
            $scope.metasParams = $scope.tabela.templateMetadado.metadados;
            angular.forEach($scope.templates, function (v, i) {
              if (v.id == $scope.tabela.templateMetadado.id) {
                $('#herdarTemplate').val(i);
              }
            });
            $scope.metasParams = [];
            angular.forEach($scope.tabela.templateMetadado.metadados, function (v, i) {
              $scope.metasParams.push(v);
            });
          }).error(function (data, status) {
          });
        }
      });
    };
    $scope.buscarAtributos = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(10, num, true, 'apresentacao', null);
      esbJson.addParametro('status', 'ATIVO');
      if (filtro) {
        if (filtro.apresentacao)
          esbJson.addParametro('apresentacao', filtro.apresentacao);
        if (filtro.nome)
          esbJson.addParametro('nome', filtro.nome);
        if (filtro.tipo)
          esbJson.addParametro('tipo', filtro.tipo);
      }
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/metadado/'
      }).success(function (data) {
        $scope.filtroAtual = filtro;
        $scope.atributos = data.message.response.list;
        $scope.paginador(data.message.response.size, num + 1);
        lock = false;
        $('.paginationBuscaAtributos').show();
        angular.forEach($scope.atributos, function (v) {
          angular.forEach($scope.metasParams, function (vt) {
            if (vt.metadado.id == v.id) {
              v.selecionado = true;
            }
          });
        });
      }).error(function (data, status) {
      });
    };
    $scope.selecionarAtributo = function (index) {
      if ($scope.atributos) {
        var templateParam = {};
        var atributo = $scope.atributos[index];
        atributo.selecionado = true;
        templateParam.metadado = atributo;
        templateParam.obrigatorio = false;
        templateParam.regex = '';
        $scope.metasParams.push(templateParam);
        $scope.customTemplate = true;
      }
    };
    $scope.selecionarTemplate = function () {
      $scope.metasParams = [];
      angular.forEach($scope.tabela.templateMetadado.metadados, function (v, i) {
        $scope.metasParams.push(v);
      });
      $scope.customTemplate = false;
    };
    $scope.paginador = function (size, paginaAtual) {
      var paginas = Math.ceil(size / 20);
      $('.paginationBuscaAtributos').bootpag({
        total: paginas,
        page: paginaAtual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.buscarAtributos($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.salvar = function () {
      if ($scope.validateForm($scope.tabela))
        if ($scope.tabela.templateMetadado) {
          $scope.tabela.templateMetadado.selecionado = $scope.customTemplate;
          $scope.tabela.templateMetadado.metadados = $scope.metasParams;
        }
      var esbJson = new EsbJson(su);
      esbJson.addToSave($scope.tabela);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/tabelaterminologia/save'
      }).success(function (data) {
        $('#cancelar').click();
      }).error(function (data, status) {
        $scope.form.nomeExistente = false;
        angular.forEach(data.message.erro, function (err) {
          if (err.campo == 'ER0020') {
            $scope.form.tabelaExistente = true;
          }
        });
      });
    };
    $scope.exluirAtributo = function (index) {
      $scope.metasParams.splice(index, 1);
      $scope.customTemplate = true;
    };
    $scope.validateForm = function (tabela) {
      $scope.form = {};
      $scope.form.nomeRequired = false;
      $scope.form.versaoRequired = false;
      $scope.form.tipoCompartilhamentoRequired = false;
      $scope.form.fimVigenciaRequired = false;
      if (tabela) {
        if (!tabela.versao || tabela.versao === '')
          $scope.form.versaoRequired = true;
        if (!tabela.nome || tabela.nome === '')
          $scope.form.nomeRequired = true;
        if (!tabela.tipoCompartilhamento || tabela.tipoCompartilhamento === '')
          $scope.form.tipoCompartilhamentoRequired = true;
        if (!tabela.versaoAtual && (!tabela.fimVigenciaFormatada || tabela.fimVigenciaFormatada === ''))
          $scope.form.fimVigenciaRequired = true;
      } else {
        $scope.form.nomeRequired = true;
        $scope.form.versaoRequired = true;
        $scope.form.tipoCompartilhamentoRequired = true;
        return false;
      }
      return !$scope.form.tipoCompartilhamentoRequired && !$scope.form.versaoRequired && !$scope.form.nomeRequired && !$scope.form.fimVigenciaRequired;
    };
  }
]);
app.controller('TipoMapeamentoBuscaController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.filtro = {};
    $scope.initController = function () {
      var filldata = ['STATUS'];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('filldata', filldata);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/utils/filldata'
      }).success(function (data) {
        $scope.statuss = data.message.response.STATUS;
        $scope.buscar(null);
      });
    };
    $scope.buscar = function (filtro) {
      $scope.executaBusca(filtro, 0);
    };
    $scope.executaBusca = function (filtro, num) {
      var esbJson = new EsbJson(su);
      esbJson.setCriteria(15, num, true, 'descricao', null);
      if (filtro) {
        if (filtro.descricao)
          esbJson.addParametro('descricao', filtro.descricao);
        if (filtro.status)
          esbJson.addParametro('status', filtro.status);
      }
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/tipomapeamento/'
      }).success(function (data) {
        $scope.tiposMapeamentos = data.message.response.list;
        $scope.paginador(data.message.response.size, num + 1);
        lock = false;
      }).error(function (data, status) {
      });
    };
    $scope.paginador = function (size, paginaAtual) {
      var paginas = Math.ceil(size / 20);
      $('.pagination').bootpag({
        total: paginas,
        page: paginaAtual,
        maxVisible: 10
      }).on('page', function (event, num) {
        if (!lock) {
          lock = true;
          $scope.executaBusca($scope.filtroAtual, num - 1);
        }
      });
    };
    $scope.trocarStatus = function (index) {
      var tipoMapeamento = $scope.tiposMapeamentos[index];
      var esbJson = new EsbJson(su);
      esbJson.addParametro('id', tipoMapeamento.id);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/tipomapeamento/alterarstatus'
      }).success(function (data) {
        $scope.tiposMapeamentos[index] = data.message.response.entidade;
      }).error(function (data, status) {
      });
    };
    $scope.reset = function () {
      $scope.filtro = {};
    };
  }
]);
app.controller('TipoMapeamentoCadastroController', [
  '$scope',
  '$rootScope',
  '$location',
  '$http',
  function ($scope, $rootScope, $location, $http) {
    $rootScope.activetab = $location.path();
    $scope.salvar = function (descricao) {
      var esbJson = new EsbJson(su);
      esbJson.addParaemtroToSave('descricao', descricao);
      $http({
        method: 'POST',
        data: esbJson.toString(),
        url: '/etermws/tipomapeamento/save'
      }).success(function (data) {
        return true;
      });
    };
  }
]);
app.directive('esbChave', [
  '$filter',
  function ($filter) {
    var link = function (scope, element, attrs, ctrl) {
      var _format = function (value) {
        value = value.replace(/[\s]/g, '_');
        value = value.replace(/[^0-9a-zA-Z_]/g, '');
        value = value.toUpperCase(value);
        return value;
      };
      element.bind('keyup', function () {
        ctrl.$setViewValue(_format(ctrl.$viewValue));
        ctrl.$render();
      });
      ctrl.$parsers.push(function (value) {
        return _format(value);
      });
    };
    return {
      restrict: 'A',
      require: 'ngModel',
      link: link
    };
  }
]);
app.directive('esbMaskDateHora', [
  '$filter',
  function ($filter) {
    var link = function (scope, element, attrs, ctrl) {
      var _format = function (data) {
        data = data.replace(/[^0-9]/g, '');
        if (data.length > 2) {
          data = data.substring(0, 2) + '/' + data.substring(2);
        }
        if (data.length > 5) {
          data = data.substring(0, 5) + '/' + data.substring(5);
        }
        if (data.length > 10) {
          data = data.substring(0, 10) + ' ' + data.substring(10);
        }
        if (data.length > 13) {
          data = data.substring(0, 13) + ':' + data.substring(13, 15);
        }
        return data;
      };
      element.bind('keyup', function () {
        ctrl.$setViewValue(_format(ctrl.$viewValue));
        ctrl.$render();
      });
      ctrl.$parsers.push(function (value) {
        if (value.length === 16) {
          var pattern = /([0-9]{2})\/([0-9]{2})\/([0-9]{4})\s([0-9]{2}):([0-9]{2})/;
          var dateArray = pattern.exec(value);
          return new Date(dateArray[3], dateArray[2] - 1, dateArray[1], dateArray[4], dateArray[5]).getTime();
        }
      });
      ctrl.$formatters.push(function (value) {
        return $filter('date')(value, 'dd/MM/yyyy hh:mm');
      });
    };
    return {
      restrict: 'A',
      require: 'ngModel',
      link: link
    };
  }
]);
app.directive('esbMaskDate', [
  '$filter',
  function ($filter) {
    var link = function (scope, element, attrs, ctrl) {
      var _format = function (data) {
        data = data.replace(/[^0-9]/g, '');
        if (data.length > 2) {
          data = data.substring(0, 2) + '/' + data.substring(2);
        }
        if (data.length > 5) {
          data = data.substring(0, 5) + '/' + data.substring(5, 9);
        }
        return data;
      };
      element.bind('keyup', function () {
        ctrl.$setViewValue(_format(ctrl.$viewValue));
        ctrl.$render();
      });
      ctrl.$parsers.push(function (value) {
        if (value.length === 10) {
          return value;
        }
      });
      ctrl.$formatters.push(function (value) {
        return $filter('date')(value, 'dd/MM/yyyy');
      });
    };
    return {
      restrict: 'A',
      require: 'ngModel',
      link: link
    };
  }
]);
app.directive('esbTableBtn', [
  '$rootScope',
  function ($rootScope) {
    return {
      restrict: 'E',
      replace: true,
      scope: {
        value: '@',
        icon: '@',
        classe: '@class',
        controlador: '@',
        click: '@'
      },
      require: '^esbTableCollum',
      link: function (scope, element, attrs, ctrl) {
        console.log($rootScope);
        /*var controlador = angular.element(document.getElementById(scope.controlador)).scope();
            eval('controlador.'+scope.click+';');
            controlador.$apply();*/
        var btn = '';
        var classe = scope.classe ? scope.classe : 'btn-primary';
        var icon = scope.icon ? '<i class="fa ' + scope.icon + '"></i>' : '';
        var value = scope.valor ? scope.valor : '';
        var click = scope.click ? 'onclick="teste()" ' : '';
        btn += '<a  data-placement="top" class="btn ' + classe + ' btn-xs" ' + click + '>';
        btn += icon + value;
        btn += '</a>';
        ctrl.setBtn(btn);
      }
    };
  }
]);
app.directive('esbTableCollum', function () {
  return {
    restrict: 'E',
    replace: true,
    transclude: true,
    templateUrl: URL + 'public/js/html/esb/esb-table-collum.html',
    scope: {
      name: '@',
      title: '@',
      sortable: '@'
    },
    require: '^esbTable',
    controller: [
      '$scope',
      '$element',
      '$attrs',
      function ($scope, $element, $attrs) {
        $scope.botoes = [];
        this.setBtn = function (btn) {
          $scope.botoes.push(btn);
        };
      }
    ],
    link: function (scope, element, attrs, ctrl) {
      function formatter(value, row, index) {
        var str = '';
        scope.botoes.forEach(function (element, index) {
          str += element;
        });
        return str;
      }
      var config = {};
      config.field = scope.name;
      config.title = scope.title;
      config.sortable = scope.sortable;
      config.class = 'arr-col';
      if (scope.botoes.length > 0) {
        config.formatter = formatter;
      }
      ctrl.registerCollum(scope);
      ctrl.configCollum(config);
    }
  };
});
app.directive('esbTable', function () {
  return {
    restrict: 'E',
    replace: true,
    transclude: true,
    templateUrl: URL + 'public/js/html/esb/esb-table.html',
    scope: {
      name: '@',
      params: '=',
      url: '='
    },
    controller: [
      '$scope',
      '$element',
      '$attrs',
      function ($scope, $element, $attrs) {
        var collums = [];
        this.columnsConfig = [];
        this.registerCollum = function (collum) {
          collums.push(collum);
        };
        this.configCollum = function (config) {
          this.columnsConfig.push(config);
        };
      }
    ],
    link: function (scope, element, attrs, ctrl) {
      esbJson = new EsbJson();
      esbJson.setParametro(scope.params);
      function ajaxRequest(params) {
        esbJson.setLimit(params.data.limit);
        esbJson.setOffset(params.data.offset);
        esbJson.setOrder(params.data.order);
        esbJson.setSort(params.data.sort);
        esbJson.setPaged(true);
        $.ajax({
          method: 'GET',
          url: params.url,
          data: esbJson.toString()
        }).done(function (data) {
          params.success(JSON.parse(data));
          params.complete();
        });
      }
      var options = {
          url: scope.url,
          sidePagination: 'server',
          ajax: ajaxRequest,
          pagination: true,
          striped: true,
          showRefresh: true,
          showToggle: true,
          showColumns: true,
          flat: true,
          cookie: true,
          cookieIdTable: 'table-atendimento-presencial',
          cookieExpire: '1y',
          mobileResponsive: true,
          reorderableColumns: true,
          maxMovingRows: 100,
          columns: ctrl.columnsConfig
        };
      $('#tabela').bootstrapTable(options);
    }
  };
});
app.directive('etermCabecalho', function () {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: URL + 'public/js/html/eterm/eterm-cabecalho.html',
    scope: {
      icon: '@',
      title: '@'
    }
  };
});