<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		                   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		                   http://www.springframework.org/schema/tx 
		                   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
						   http://www.springframework.org/schema/aop 
						   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		                   http://www.springframework.org/schema/util 
						   http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${datasource.driverClassName}" />
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean>

	<!-- Faz o Spring fazer a injecao do contexto de persistencia atraves da anotacao @PersistenceContext -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="mugetsuPU" />
	  	<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
		<property name="jpaProperties" ref="jpaProperties"/>
		<property name="loadTimeWeaver">
			<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="read*" read-only="true" propagation="SUPPORTS"/>
			
            <tx:method name="insert*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			
			<tx:method name="efetua*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="salva*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="inseri*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="atualiza*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="altera*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="deleta*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="exclui*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			
			<tx:method name="refresh*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="reativar*" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            
            <tx:method name="importar*" read-only="false" propagation="SUPPORTS" rollback-for="java.lang.Exception"/>
            <tx:method name="extrair*" read-only="false" propagation="SUPPORTS" rollback-for="java.lang.Exception"/>
			
			<tx:method name="busca*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="lista*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="obte*" read-only="true" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
<!--             <tx:method name="*" read-only="true" propagation="NEVER"/> -->
        </tx:attributes>
    </tx:advice>
    
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* *..service..*Service*.*(..)) and !@annotation(org.springframework.transaction.annotation.Transactional)"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" order="100"/>
	</aop:config>
	
	<tx:annotation-driven transaction-manager="transactionManager" order="200" />
    
    <util:properties id="jpaProperties">
        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
        <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
        <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
		<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>

		<prop key="hibernate.cache.use_minimal_puts">${hibernate.cache.use_minimal_puts}</prop>
		<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
		<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
		<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
		<prop key="hibernate.cache.query_cache_factory">${hibernate.cache.query_cache_factory}</prop>
   	</util:properties>
    
</beans>